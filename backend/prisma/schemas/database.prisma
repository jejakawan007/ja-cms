// =============================================
// DATABASE MANAGEMENT & OPTIMIZATION MODELS
// =============================================

// Database Optimization Jobs
model DatabaseOptimizationJob {
  id          String   @id @default(cuid())
  name        String
  type        String   // index_optimization, query_optimization, cleanup, vacuum
  targets     Json     // Tables/queries to optimize
  status      String   @default("pending") // pending, running, completed, failed
  progress    Int      @default(0) // 0-100
  config      Json?    // Optimization configuration
  results     Json?    // Optimization results
  performance Json?    // Performance improvements
  startedAt   DateTime?
  completedAt DateTime?
  duration    Int?     // Duration in milliseconds
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User     @relation("CreatedDatabaseOptimizationJobs", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([status])
  @@index([createdBy])
  @@map("database_optimization_jobs")
}

// Database Metrics
model DatabaseMetric {
  id                  String   @id @default(cuid())
  timestamp           DateTime @default(now())
  performanceMetrics  Json     // Query performance, connection pool, etc.
  storageMetrics      Json     // Database size, table sizes, index usage
  connectionMetrics   Json     // Active connections, connection pool stats
  replicationMetrics  Json?    // Replication lag, sync status
  lockMetrics         Json?    // Lock waits, deadlocks
  cacheMetrics        Json?    // Query cache, buffer pool stats
  createdAt           DateTime @default(now())

  @@index([timestamp])
  @@map("database_metrics")
}

// Slow Queries
model SlowQuery {
  id            String   @id @default(cuid())
  queryHash     String   // Hash of the query for grouping
  sqlText       String   // The actual SQL query
  executionTime Float    // Execution time in seconds
  lockTime      Float    // Lock time in seconds
  rowsExamined  Int?     // Number of rows examined
  rowsSent      Int?     // Number of rows returned
  database      String?  // Database name
  userId        String?  // User who executed the query
  hostInfo      String?  // Host information
  timestamp     DateTime @default(now())
  frequency     Int      @default(1) // How often this query appears
  lastSeen      DateTime @default(now())

  @@index([queryHash])
  @@index([executionTime])
  @@index([timestamp])
  @@map("slow_queries")
}

// Database Alerts
model DatabaseAlert {
  id             String   @id @default(cuid())
  alertType      String   // performance, storage, connection, replication
  metricName     String   // Specific metric that triggered alert
  thresholdValue Float    // Alert threshold
  currentValue   Float    // Current metric value
  severity       String   // low, medium, high, critical
  message        String
  details        Json?    // Additional alert details
  isActive       Boolean  @default(true)
  isResolved     Boolean  @default(false)
  resolvedBy     String?
  resolvedAt     DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  resolver       User?    @relation("ResolvedDatabaseAlerts", fields: [resolvedBy], references: [id], onDelete: SetNull)

  @@index([alertType])
  @@index([severity])
  @@index([isActive])
  @@map("database_alerts")
}

// Database Cleanup History
model DatabaseCleanupHistory {
  id            String   @id @default(cuid())
  cleanupType   String   // orphaned_data, old_logs, temp_tables, unused_indexes
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  duration      Int?     // Duration in milliseconds
  itemsCleaned  Int      @default(0)
  spaceSaved    BigInt   @default(0) // Bytes saved
  details       Json?    // Cleanup details
  success       Boolean  @default(true)
  error         String?
  triggeredBy   String   // manual, scheduled, automatic
  executedBy    String?

  // Relations
  executor      User?    @relation("ExecutedDatabaseCleanups", fields: [executedBy], references: [id], onDelete: SetNull)

  @@index([cleanupType])
  @@index([startedAt])
  @@map("database_cleanup_history")
}

// Table Analysis Cache
model TableAnalysisCache {
  id           String   @id @default(cuid())
  tableName    String
  schemaName   String   @default("public")
  analysisData Json     // Table statistics, index usage, etc.
  rowCount     BigInt?  // Approximate row count
  tableSize    BigInt?  // Table size in bytes
  indexSize    BigInt?  // Total index size in bytes
  lastAnalyzed DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([tableName, schemaName])
  @@index([lastAnalyzed])
  @@map("table_analysis_cache")
}

// Database Connection Pool Stats
model ConnectionPoolStat {
  id              String   @id @default(cuid())
  timestamp       DateTime @default(now())
  activeConnections Int    @default(0)
  idleConnections   Int    @default(0)
  totalConnections  Int    @default(0)
  maxConnections    Int    @default(0)
  connectionWaits   Int    @default(0)
  averageWaitTime   Float  @default(0) // in milliseconds
  poolUtilization   Float  @default(0) // percentage
  createdAt       DateTime @default(now())

  @@index([timestamp])
  @@map("connection_pool_stats")
}

// Query Performance History
model QueryPerformanceHistory {
  id              String   @id @default(cuid())
  queryHash       String
  timestamp       DateTime @default(now())
  executionTime   Float    // in seconds
  planHash        String?  // Execution plan hash
  cacheHit        Boolean  @default(false)
  indexesUsed     Json?    // Indexes used in execution
  estimatedCost   Float?   // Query optimizer cost
  actualCost      Float?   // Actual execution cost
  createdAt       DateTime @default(now())

  @@index([queryHash])
  @@index([timestamp])
  @@index([executionTime])
  @@map("query_performance_history")
}
