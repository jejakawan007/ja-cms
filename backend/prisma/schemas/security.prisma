// =============================================
// SECURITY SYSTEM MODELS
// =============================================

// Security Events
model SecurityEvent {
  id          String   @id @default(cuid())
  type        String   // login_attempt, failed_login, suspicious_activity, etc.
  severity    String   // low, medium, high, critical
  source      String   // login, api, admin, system
  description String
  ipAddress   String?
  userAgent   String?
  userId      String?
  metadata    Json?    // Additional event data
  isResolved  Boolean  @default(false)
  resolvedBy  String?
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())

  // Relations
  user        User?    @relation("UserSecurityEvents", fields: [userId], references: [id], onDelete: SetNull)
  resolver    User?    @relation("ResolvedSecurityEvents", fields: [resolvedBy], references: [id], onDelete: SetNull)

  @@index([type])
  @@index([severity])
  @@index([ipAddress])
  @@index([userId])
  @@index([createdAt])
  @@map("security_events")
}

// Firewall Rules
model FirewallRule {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   // ip_block, country_block, rate_limit, pattern_block
  action      String   // allow, block, log, challenge
  priority    Int      @default(0)
  conditions  Json     // Rule conditions (IP ranges, patterns, etc.)
  isActive    Boolean  @default(true)
  hitCount    Int      @default(0)
  lastHit     DateTime?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User     @relation("CreatedFirewallRules", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([priority])
  @@index([isActive])
  @@map("firewall_rules")
}

// IP Whitelist/Blacklist
model IpList {
  id          String   @id @default(cuid())
  ipAddress   String
  type        String   // whitelist, blacklist
  reason      String?
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  hitCount    Int      @default(0)
  lastHit     DateTime?
  addedBy     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User     @relation("CreatedIpLists", fields: [addedBy], references: [id], onDelete: Cascade)

  @@unique([ipAddress, type])
  @@index([type])
  @@index([isActive])
  @@index([expiresAt])
  @@map("ip_lists")
}

// Security Incidents
model SecurityIncident {
  id            String   @id @default(cuid())
  title         String
  description   String
  severity      String   // low, medium, high, critical
  status        String   @default("open") // open, investigating, resolved, closed
  category      String   // intrusion, malware, data_breach, etc.
  affectedSystems Json?  // List of affected systems/users
  timeline      Json?    // Incident timeline
  assignedTo    String?
  reportedBy    String?
  resolvedBy    String?
  reportedAt    DateTime @default(now())
  resolvedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  assignee      User?    @relation("AssignedIncidents", fields: [assignedTo], references: [id], onDelete: SetNull)
  reporter      User?    @relation("ReportedIncidents", fields: [reportedBy], references: [id], onDelete: SetNull)
  resolver      User?    @relation("ResolvedIncidents", fields: [resolvedBy], references: [id], onDelete: SetNull)
  responses     IncidentResponse[]

  @@index([severity])
  @@index([status])
  @@index([category])
  @@index([assignedTo])
  @@map("security_incidents")
}

// Incident Response Actions
model IncidentResponse {
  id          String   @id @default(cuid())
  incidentId  String
  action      String   // block_ip, disable_user, patch_system, etc.
  description String
  status      String   @default("pending") // pending, executed, failed
  executedBy  String?
  executedAt  DateTime?
  result      String?
  createdAt   DateTime @default(now())

  // Relations
  incident    SecurityIncident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  executor    User?           @relation("ExecutedResponses", fields: [executedBy], references: [id], onDelete: SetNull)

  @@index([incidentId])
  @@index([status])
  @@map("incident_responses")
}

// Active Sessions (for session management)
model ActiveSession {
  id          String   @id @default(cuid())
  userId      String
  sessionId   String   @unique
  ipAddress   String
  userAgent   String?
  location    String?  // Geographic location
  device      String?  // Device type/name
  isActive    Boolean  @default(true)
  lastActivity DateTime @default(now())
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation("UserActiveSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
  @@index([expiresAt])
  @@map("active_sessions")
}

// Password History (for password policy enforcement)
model PasswordHistory {
  id          String   @id @default(cuid())
  userId      String
  passwordHash String
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation("UserPasswordHistory", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("password_history")
}

// Login Attempts (for rate limiting and monitoring)
model LoginAttempt {
  id          String   @id @default(cuid())
  email       String?
  ipAddress   String
  userAgent   String?
  success     Boolean  @default(false)
  failureReason String?
  userId      String?  // Only set for successful logins
  createdAt   DateTime @default(now())

  // Relations
  user        User?    @relation("UserLoginAttempts", fields: [userId], references: [id], onDelete: SetNull)

  @@index([email])
  @@index([ipAddress])
  @@index([success])
  @@index([createdAt])
  @@map("login_attempts")
}

// Security Configuration
model SecurityConfig {
  id          String   @id @default(cuid())
  category    String   // password_policy, session_config, rate_limiting, etc.
  key         String
  value       Json
  description String?
  isActive    Boolean  @default(true)
  updatedBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  updater     User     @relation("UpdatedSecurityConfigs", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@unique([category, key])
  @@index([category])
  @@index([isActive])
  @@map("security_configs")
}
