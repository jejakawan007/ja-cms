// =============================================
// ADVANCED EXTENSIONS & DEVELOPMENT MODELS
// =============================================

// Development Projects
model DevProject {
  id           String   @id @default(cuid())
  name         String
  path         String   // Project path
  templateId   String?  // Template used to create project
  manifest     Json     // Project manifest (package.json equivalent)
  status       String   @default("active") // active, archived, error
  version      String   @default("0.1.0")
  description  String?
  repository   String?  // Git repository URL
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  creator      User         @relation("CreatedDevProjects", fields: [createdBy], references: [id], onDelete: Cascade)
  testResults  TestResult[]
  buildHistory BuildHistory[]
  devLogs      DevLog[]

  @@index([status])
  @@index([createdBy])
  @@map("dev_projects")
}

// Test Results
model TestResult {
  id          String   @id @default(cuid())
  projectId   String
  suiteName   String
  testName    String
  status      String   // passed, failed, skipped, error
  duration    Int?     // Test duration in milliseconds
  error       String?  // Error message if failed
  output      String?  // Test output
  coverage    Json?    // Code coverage data
  assertions  Int?     // Number of assertions
  createdAt   DateTime @default(now())

  // Relations
  project     DevProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([suiteName])
  @@map("test_results")
}

// Build History
model BuildHistory {
  id          String   @id @default(cuid())
  projectId   String
  version     String
  status      String   // building, success, failed
  artifacts   Json?    // Build artifacts information
  duration    Int?     // Build duration in seconds
  size        BigInt?  // Build size in bytes
  logs        String?  // Build logs
  error       String?  // Build error if failed
  triggeredBy String   // manual, git_push, scheduled
  startedAt   DateTime @default(now())
  completedAt DateTime?

  // Relations
  project     DevProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([version])
  @@map("build_history")
}

// Development Logs
model DevLog {
  id          String   @id @default(cuid())
  projectId   String
  level       String   // debug, info, warn, error
  message     String
  context     Json?    // Additional context data
  component   String?  // Component that generated the log
  timestamp   DateTime @default(now())

  // Relations
  project     DevProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([level])
  @@index([timestamp])
  @@map("dev_logs")
}

// Hook Callbacks (extending the hook system)
model HookCallback {
  id          String   @id @default(cuid())
  hookName    String
  pluginId    String
  callbackId  String   // Function identifier
  priority    Int      @default(10)
  isActive    Boolean  @default(true)
  conditions  Json?    // Conditions for callback execution
  config      Json?    // Callback configuration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  plugin      Plugin   @relation("PluginHookCallbacks", fields: [pluginId], references: [id], onDelete: Cascade)

  @@unique([pluginId, hookName, callbackId])
  @@index([hookName])
  @@index([priority])
  @@map("hook_callbacks")
}

// Plugin API Endpoints
model PluginApiEndpoint {
  id          String   @id @default(cuid())
  pluginId    String
  path        String   // API endpoint path
  method      String   // GET, POST, PUT, DELETE
  handlerName String   // Handler function name
  description String?
  parameters  Json?    // Expected parameters
  responses   Json?    // Response schemas
  middleware  Json?    // Middleware configuration
  rateLimit   Json?    // Rate limiting configuration
  isPublic    Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  plugin      Plugin          @relation("PluginApiEndpoints", fields: [pluginId], references: [id], onDelete: Cascade)
  requestLogs ApiRequestLog[]

  @@unique([pluginId, path, method])
  @@index([path])
  @@index([method])
  @@map("plugin_api_endpoints")
}

// Hook Metrics
model HookMetric {
  id             String   @id @default(cuid())
  hookName       String
  executionTime  Float    // Execution time in milliseconds
  callbackCount  Int      // Number of callbacks executed
  success        Boolean  @default(true)
  error          String?  // Error message if failed
  pluginId       String?  // Plugin that triggered the hook
  context        Json?    // Execution context
  timestamp      DateTime @default(now())

  // Relations
  plugin         Plugin?  @relation("PluginHookMetrics", fields: [pluginId], references: [id], onDelete: SetNull)

  @@index([hookName])
  @@index([executionTime])
  @@index([timestamp])
  @@map("hook_metrics")
}

// API Request Logs
model ApiRequestLog {
  id           String   @id @default(cuid())
  endpointId   String?
  pluginId     String
  method       String
  path         String
  statusCode   Int
  responseTime Int      // Response time in milliseconds
  requestSize  Int?     // Request size in bytes
  responseSize Int?     // Response size in bytes
  userAgent    String?
  ipAddress    String?
  userId       String?
  error        String?  // Error message if request failed
  timestamp    DateTime @default(now())

  // Relations
  endpoint     PluginApiEndpoint? @relation(fields: [endpointId], references: [id], onDelete: SetNull)
  plugin       Plugin             @relation("PluginApiRequestLogs", fields: [pluginId], references: [id], onDelete: Cascade)
  user         User?              @relation("UserApiRequestLogs", fields: [userId], references: [id], onDelete: SetNull)

  @@index([pluginId])
  @@index([path])
  @@index([statusCode])
  @@index([timestamp])
  @@map("api_request_logs")
}

// Event Listeners
model EventListener {
  id          String   @id @default(cuid())
  eventName   String
  pluginId    String
  callbackId  String   // Function identifier
  priority    Int      @default(10)
  conditions  Json?    // Conditions for listener execution
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  plugin      Plugin   @relation("PluginEventListeners", fields: [pluginId], references: [id], onDelete: Cascade)

  @@unique([pluginId, eventName, callbackId])
  @@index([eventName])
  @@index([priority])
  @@map("event_listeners")
}

// Plugin Transactions (for paid plugins)
model PluginTransaction {
  id            String   @id @default(cuid())
  pluginId      String
  buyerId       String
  sellerId      String
  amount        Decimal  @db.Decimal(10,2)
  currency      String   @default("USD")
  status        String   @default("pending") // pending, completed, failed, refunded
  paymentMethod String?
  transactionId String?  // External payment processor ID
  fees          Decimal? @db.Decimal(10,2)
  netAmount     Decimal? @db.Decimal(10,2)
  metadata      Json?    // Additional transaction data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  plugin        MarketplacePlugin @relation("PluginTransactions", fields: [pluginId], references: [id], onDelete: Cascade)
  buyer         User              @relation("BoughtPlugins", fields: [buyerId], references: [id], onDelete: Cascade)
  seller        User              @relation("SoldPlugins", fields: [sellerId], references: [id], onDelete: Cascade)
  licenses      PluginLicense[]

  @@index([pluginId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([status])
  @@map("plugin_transactions")
}

// Plugin Licenses
model PluginLicense {
  id            String   @id @default(cuid())
  pluginId      String
  transactionId String
  userId        String
  licenseKey    String   @unique
  type          String   @default("standard") // standard, premium, enterprise
  maxInstalls   Int      @default(1)
  currentInstalls Int    @default(0)
  isActive      Boolean  @default(true)
  expiresAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  plugin        MarketplacePlugin @relation("PluginLicenses", fields: [pluginId], references: [id], onDelete: Cascade)
  transaction   PluginTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  user          User              @relation("UserPluginLicenses", fields: [userId], references: [id], onDelete: Cascade)
  downloads     PluginDownload[]  @relation("LicenseDownloads")

  @@index([pluginId])
  @@index([userId])
  @@index([licenseKey])
  @@index([isActive])
  @@map("plugin_licenses")
}

// Plugin Downloads
model PluginDownload {
  id          String   @id @default(cuid())
  pluginId    String
  version     String
  userId      String?
  licenseId   String?
  ipAddress   String?
  userAgent   String?
  downloadedAt DateTime @default(now())

  // Relations
  plugin      MarketplacePlugin @relation("PluginDownloads", fields: [pluginId], references: [id], onDelete: Cascade)
  user        User?             @relation("UserPluginDownloads", fields: [userId], references: [id], onDelete: SetNull)
  license     PluginLicense?    @relation("LicenseDownloads", fields: [licenseId], references: [id], onDelete: SetNull)

  @@index([pluginId])
  @@index([userId])
  @@index([downloadedAt])
  @@map("plugin_downloads")
}

// Plugin Statistics
model PluginStat {
  pluginId         String            @id
  downloadsTotal   Int               @default(0)
  downloadsMonthly Int               @default(0)
  activeInstalls   Int               @default(0)
  ratingAverage    Decimal           @default(0) @db.Decimal(3,2)
  ratingCount      Int               @default(0)
  revenue          Decimal           @default(0) @db.Decimal(12,2)
  lastUpdated      DateTime          @default(now())

  // Relations
  plugin           MarketplacePlugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@map("plugin_stats")
}

// Review Votes
model ReviewVote {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  vote      String   // helpful, not_helpful
  createdAt DateTime @default(now())

  // Relations
  review    PluginReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User         @relation("UserReviewVotes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
  @@index([vote])
  @@map("review_votes")
}
