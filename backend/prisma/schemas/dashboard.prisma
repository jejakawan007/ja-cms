// =============================================
// DASHBOARD SYSTEM MODELS
// =============================================

// User Dashboard Preferences
model UserDashboardPreference {
  id        String   @id @default(cuid())
  userId    String   @unique
  layout    DashboardLayout @default(DEFAULT)
  theme     String   @default("default")
  widgets   Json     // Array of enabled widget IDs
  layoutConfig Json  // Custom layout configuration
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation("UserDashboardPreferences", fields: [userId], references: [id], onDelete: Cascade)
}

enum DashboardLayout {
  DEFAULT
  CUSTOM
}

// Dashboard Widgets
model DashboardWidget {
  id          String   @id @default(cuid())
  name        String   @unique
  title       String
  description String?
  type        WidgetType
  category    WidgetCategory
  icon        String?
  component   String   // Component name
  config      Json?    // Widget configuration
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  sortOrder   Int      @default(0)
  permissions String[] // Required permissions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userWidgets UserWidget[]
}

enum WidgetType {
  STATS_CARD
  CHART
  LIST
  QUICK_ACTIONS
  NOTIFICATIONS
  ACTIVITY_FEED
  SYSTEM_HEALTH
  SECURITY_STATUS
  REAL_TIME_VISITORS
  TRAFFIC_SOURCES
  DEVICE_BREAKDOWN
  GEOGRAPHIC_DATA
  CONTENT_PERFORMANCE
  CUSTOM
}

enum WidgetCategory {
  OVERVIEW
  ANALYTICS
  CONTENT
  USERS
  SYSTEM
  SECURITY
  CUSTOM
}

// User Widget Preferences
model UserWidget {
  id        String   @id @default(cuid())
  userId    String
  widgetId  String
  isEnabled Boolean  @default(true)
  position  Json     // { x: number, y: number, w: number, h: number }
  config    Json?    // Widget-specific configuration
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User             @relation("UserWidgets", fields: [userId], references: [id], onDelete: Cascade)
  widget DashboardWidget  @relation(fields: [widgetId], references: [id], onDelete: Cascade)

  @@unique([userId, widgetId])
}

// Dashboard Activity Log
model DashboardActivity {
  id          String   @id @default(cuid())
  userId      String
  action      String
  entityType  String?  // post, user, media, etc.
  entityId    String?
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  user User @relation("UserDashboardActivities", fields: [userId], references: [id], onDelete: Cascade)
}

// Quick Actions
model QuickAction {
  id          String   @id @default(cuid())
  title       String
  description String?
  icon        String?
  href        String?
  action      String?  // Action type for programmatic execution
  color       String?  // Color theme
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  permissions String[] // Required permissions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([title])
}

// Chart Data Cache
model ChartDataCache {
  id        String   @id @default(cuid())
  chartType String
  data      Json
  filters   Json?
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([chartType, expiresAt])
}

// Dashboard System Health Metrics (Extended)
model DashboardSystemHealthMetric {
  id                String   @id @default(cuid())
  storageUsed       BigInt   // Storage used in bytes
  storageTotal      BigInt   // Total storage in bytes
  memoryUsage       Float    // Memory usage percentage
  cpuUsage          Float    // CPU usage percentage
  uptimeSeconds     BigInt   // System uptime in seconds
  activeConnections Int      // Active database connections
  databaseSize      BigInt   // Database size in bytes
  cacheHitRate      Float    // Cache hit rate percentage
  createdAt         DateTime @default(now())

  @@index([createdAt])
}

// Dashboard Settings (Extended Configuration)
model DashboardSettings {
  id        String   @id @default(cuid())
  userId    String   @unique
  layoutMode String  @default("default") // "default" | "custom"
  theme     String   @default("neutral")
  widgets   Json     // Widget configuration
  layout    Json     // Layout configuration
  appearance Json    // Appearance settings
  data      Json     // Data settings
  gridLayout Json    // Grid layout configuration (JSONB)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation("UserDashboardSettings", fields: [userId], references: [id], onDelete: Cascade)
}
