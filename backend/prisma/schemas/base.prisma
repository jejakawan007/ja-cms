// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// CORE MODELS (Base System)
// =============================================

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  bio       String?
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false)
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  settings  UserSetting[]
  sessions  Session[]
  media     Media[]
  
  // Analytics Relations
  pageViews         PageView[]           @relation("UserPageViews")
  analyticsSessions AnalyticsSession[]   @relation("UserAnalyticsSessions")
  analyticsData     UserAnalytics[]      @relation("UserAnalyticsData")
  analyticsEvents   AnalyticsEvent[]     @relation("UserAnalyticsEvents")
  createdReports    Report[]             @relation("CreatedReports")
  executedReports   ReportExecution[]    @relation("ExecutedReports")
  
  // Content Management Relations
  createdWorkflows    ContentWorkflow[]    @relation("CreatedWorkflows")
  assignedWorkflows   WorkflowInstance[]   @relation("AssignedWorkflows")
  assignedSteps       WorkflowStep[]       @relation("AssignedWorkflowSteps")
  createdRevisions    ContentRevision[]    @relation("CreatedRevisions")
  contentLocks        ContentLock[]        @relation("ContentLocks")
  createdTemplates    ContentTemplate[]    @relation("CreatedTemplates")
  createdSchedules    ContentSchedule[]    @relation("CreatedSchedules")
  commentThreads      CommentThread[]      @relation("AuthoredCommentThreads")
  commentVotes        CommentVote[]        @relation("CommentVotes")
  
  // System Relations
  notifications       Notification[]       @relation("UserNotifications")
  auditLogs           AuditLog[]           @relation("UserAuditLogs")
  
  // Media Relations
  uploadedMediaFiles  MediaFile[]          @relation("UploadedMediaFiles")
  createdMediaFolders MediaFolder[]        @relation("CreatedMediaFolders")
  mediaUploadSessions MediaUploadSession[] @relation("MediaUploadSessions")
  
  // Security Relations
  securityEvents      SecurityEvent[]      @relation("UserSecurityEvents")
  resolvedSecurityEvents SecurityEvent[]   @relation("ResolvedSecurityEvents")
  createdFirewallRules FirewallRule[]      @relation("CreatedFirewallRules")
  createdIpLists      IpList[]             @relation("CreatedIpLists")
  assignedIncidents   SecurityIncident[]   @relation("AssignedIncidents")
  reportedIncidents   SecurityIncident[]   @relation("ReportedIncidents")
  resolvedIncidents   SecurityIncident[]   @relation("ResolvedIncidents")
  executedResponses   IncidentResponse[]   @relation("ExecutedResponses")
  activeSessions      ActiveSession[]      @relation("UserActiveSessions")
  passwordHistory     PasswordHistory[]    @relation("UserPasswordHistory")
  loginAttempts       LoginAttempt[]       @relation("UserLoginAttempts")
  updatedSecurityConfigs SecurityConfig[]  @relation("UpdatedSecurityConfigs")
  
  // Tools Relations
  createdImportJobs   ImportJob[]          @relation("CreatedImportJobs")
  createdExportJobs   ExportJob[]          @relation("CreatedExportJobs")
  createdBackupJobs   BackupJob[]          @relation("CreatedBackupJobs")
  createdRestoreJobs  RestoreJob[]         @relation("CreatedRestoreJobs")
  executedDiagnostics DiagnosticResult[]   @relation("ExecutedDiagnostics")
  createdMaintenanceTasks MaintenanceTask[] @relation("CreatedMaintenanceTasks")
  triggeredMaintenanceExecutions MaintenanceExecution[] @relation("TriggeredMaintenanceExecutions")
  
  // Extensions Relations
  installedPlugins    Plugin[]             @relation("InstalledPlugins")
  authoredMarketplacePlugins MarketplacePlugin[] @relation("AuthoredMarketplacePlugins")
  writtenPluginReviews PluginReview[]      @relation("WrittenPluginReviews")
  purchasedPlugins    PluginPurchase[]     @relation("PurchasedPlugins")
  developedPlugins    PluginDevelopment[]  @relation("DevelopedPlugins")
  
  // Advanced Extensions Relations
  createdDevProjects  DevProject[]         @relation("CreatedDevProjects")
  
  // Dashboard Relations
  dashboardPreference UserDashboardPreference? @relation("UserDashboardPreferences")
  dashboardSettings   DashboardSettings?       @relation("UserDashboardSettings")
  userWidgets         UserWidget[]             @relation("UserWidgets")
  dashboardActivities DashboardActivity[]      @relation("UserDashboardActivities")
  boughtPlugins       PluginTransaction[]  @relation("BoughtPlugins")
  soldPlugins         PluginTransaction[]  @relation("SoldPlugins")
  userPluginLicenses  PluginLicense[]      @relation("UserPluginLicenses")
  userPluginDownloads PluginDownload[]     @relation("UserPluginDownloads")
  userReviewVotes     ReviewVote[]         @relation("UserReviewVotes")
  userApiRequestLogs  ApiRequestLog[]      @relation("UserApiRequestLogs")
  
  // Diagnostics Relations
  createdDiagnosticJobs DiagnosticJob[]    @relation("CreatedDiagnosticJobs")
  resolvedSystemIssues SystemIssue[]       @relation("ResolvedSystemIssues")
  resolvedDiagnosticAlerts DiagnosticAlert[] @relation("ResolvedDiagnosticAlerts")
  
    // Database Relations
  createdDatabaseOptimizationJobs DatabaseOptimizationJob[] @relation("CreatedDatabaseOptimizationJobs")
  resolvedDatabaseAlerts DatabaseAlert[]   @relation("ResolvedDatabaseAlerts")
  executedDatabaseCleanups DatabaseCleanupHistory[] @relation("ExecutedDatabaseCleanups")
  
  // Editor Relations
  content             Content[]            @relation("UserContent")
  editorSessions      EditorSession[]      @relation("UserEditorSessions")
  autosavedContent    AutosavedContent[]   @relation("UserAutosavedContent")
  editorComments      EditorComment[]      @relation("UserEditorComments")
  resolvedComments    EditorComment[]      @relation("UserResolvedComments")
  blockUsage          BlockUsageAnalytics[] @relation("UserBlockUsage")

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model UserSetting {
  id       String @id @default(cuid())
  userId   String
  key      String
  value    String
  category String @default("general")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@map("user_settings")
}

// Enums
enum UserRole {
  USER
  EDITOR
  ADMIN
  SUPER_ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}
