// =============================================
// ADVANCED DIAGNOSTICS & SYSTEM HEALTH MODELS
// =============================================

// Diagnostic Jobs
model DiagnosticJob {
  id          String   @id @default(cuid())
  name        String
  type        String   // system, database, security, performance
  scope       String   // full, targeted, quick
  targets     Json     // What to diagnose
  status      String   @default("pending") // pending, running, completed, failed
  progress    Int      @default(0) // 0-100
  config      Json?    // Diagnostic configuration
  results     Json?    // Diagnostic results
  issues      SystemIssue[]
  startedAt   DateTime?
  completedAt DateTime?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User     @relation("CreatedDiagnosticJobs", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([status])
  @@index([createdBy])
  @@map("diagnostic_jobs")
}

// System Issues
model SystemIssue {
  id            String   @id @default(cuid())
  jobId         String?
  type          String   // performance, security, configuration, etc.
  category      String   // database, server, application, etc.
  severity      String   // low, medium, high, critical
  title         String
  description   String
  details       Json?    // Additional issue details
  affectedComponents Json? // List of affected components
  recommendations Json?  // Recommended solutions
  status        String   @default("open") // open, investigating, resolved, ignored
  resolvedBy    String?
  resolvedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  diagnosticJob DiagnosticJob? @relation(fields: [jobId], references: [id], onDelete: SetNull)
  resolver      User?          @relation("ResolvedSystemIssues", fields: [resolvedBy], references: [id], onDelete: SetNull)
  troubleshootingHistory AutoTroubleshootingHistory[]

  @@index([type])
  @@index([severity])
  @@index([status])
  @@index([jobId])
  @@map("system_issues")
}

// Performance Profiles
model PerformanceProfile {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  duration    Int      // Profile duration in milliseconds
  metrics     Json     // Performance metrics data
  traces      Json?    // Execution traces
  bottlenecks Json?    // Identified bottlenecks
  context     Json?    // Context information (URL, user, etc.)
  createdAt   DateTime @default(now())

  @@index([timestamp])
  @@map("performance_profiles")
}

// Error Tracking
model ErrorTracking {
  id          String   @id @default(cuid())
  trackingId  String   @unique
  startTime   DateTime @default(now())
  endTime     DateTime?
  duration    Int?     // Total tracking duration
  errorCount  Int      @default(0)
  errors      Json     // Collected errors
  context     Json?    // Application context
  resolved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([trackingId])
  @@index([resolved])
  @@map("error_tracking")
}

// Troubleshooting Solutions
model TroubleshootingSolution {
  id               String   @id @default(cuid())
  name             String
  description      String
  category         String   // performance, security, configuration
  applicableIssues Json     // Issue types this solution can fix
  steps            Json     // Solution steps
  automatable      Boolean  @default(false)
  successRate      Float    @default(0) // Historical success rate
  riskLevel        String   @default("low") // low, medium, high
  requirements     Json?    // Prerequisites for applying solution
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  applications     AutoTroubleshootingHistory[]

  @@index([category])
  @@index([automatable])
  @@map("troubleshooting_solutions")
}

// Auto Troubleshooting History
model AutoTroubleshootingHistory {
  id               String   @id @default(cuid())
  issueId          String?
  solutionId       String?
  success          Boolean  @default(false)
  appliedSolutions Json?    // Solutions that were applied
  results          Json?    // Results of troubleshooting
  duration         Int?     // Time taken in seconds
  error            String?  // Error if troubleshooting failed
  createdAt        DateTime @default(now())

  // Relations
  issue            SystemIssue?            @relation(fields: [issueId], references: [id], onDelete: SetNull)
  solution         TroubleshootingSolution? @relation(fields: [solutionId], references: [id], onDelete: SetNull)

  @@index([issueId])
  @@index([solutionId])
  @@index([success])
  @@map("auto_troubleshooting_history")
}

// System Health Metrics
model SystemHealthMetric {
  id                  String   @id @default(cuid())
  timestamp           DateTime @default(now())
  overallScore        Int      // 0-100 health score
  categoryScores      Json     // Scores by category
  activeIssuesCount   Int      @default(0)
  criticalIssuesCount Int      @default(0)
  performanceScore    Int      @default(100)
  securityScore       Int      @default(100)
  stabilityScore      Int      @default(100)
  metrics             Json     // Detailed metrics
  recommendations     Json?    // Health recommendations
  createdAt           DateTime @default(now())

  @@index([timestamp])
  @@index([overallScore])
  @@map("system_health_metrics")
}

// Diagnostic Alerts
model DiagnosticAlert {
  id          String   @id @default(cuid())
  alertType   String   // threshold, anomaly, error, warning
  severity    String   // low, medium, high, critical
  title       String
  description String
  metric      String?  // Related metric name
  threshold   Float?   // Alert threshold
  currentValue Float?  // Current metric value
  conditions  Json?    // Alert conditions
  isActive    Boolean  @default(true)
  isResolved  Boolean  @default(false)
  resolvedBy  String?
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  resolver    User?    @relation("ResolvedDiagnosticAlerts", fields: [resolvedBy], references: [id], onDelete: SetNull)

  @@index([alertType])
  @@index([severity])
  @@index([isActive])
  @@index([isResolved])
  @@map("diagnostic_alerts")
}
