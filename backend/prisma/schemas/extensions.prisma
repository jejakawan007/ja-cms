// =============================================
// EXTENSIONS SYSTEM MODELS
// =============================================

// Plugins
model Plugin {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  version     String
  description String?
  author      String
  authorEmail String?
  website     String?
  repository  String?
  license     String?
  status      String   @default("inactive") // active, inactive, error
  type        String   @default("plugin") // plugin, theme, widget
  category    String?  // content, media, security, etc.
  config      Json?    // Plugin configuration
  manifest    Json     // Plugin manifest (package.json equivalent)
  dependencies Json?   // Plugin dependencies
  permissions Json?    // Required permissions
  hooks       Json?    // Registered hooks
  installPath String
  isCore      Boolean  @default(false)
  installedBy String
  installedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  installer   User     @relation("InstalledPlugins", fields: [installedBy], references: [id], onDelete: Cascade)
  settings    PluginSetting[]
  hooks_rel   PluginHook[]
  hookExecutions HookExecution[] @relation("PluginHookExecutions")
  hookCallbacks HookCallback[]  @relation("PluginHookCallbacks")
  apiEndpoints PluginApiEndpoint[] @relation("PluginApiEndpoints")
  hookMetrics HookMetric[]       @relation("PluginHookMetrics")
  apiRequestLogs ApiRequestLog[] @relation("PluginApiRequestLogs")
  eventListeners EventListener[] @relation("PluginEventListeners")

  @@index([status])
  @@index([type])
  @@index([category])
  @@map("plugins")
}

// Plugin Settings
model PluginSetting {
  id          String   @id @default(cuid())
  pluginId    String
  key         String
  value       Json
  type        String   @default("string") // string, number, boolean, json, array
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  plugin      Plugin   @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@unique([pluginId, key])
  @@index([pluginId])
  @@map("plugin_settings")
}

// Plugin Hooks
model PluginHook {
  id          String   @id @default(cuid())
  pluginId    String
  hookName    String
  callback    String   // Function name to call
  priority    Int      @default(10)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  plugin      Plugin   @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@unique([pluginId, hookName, callback])
  @@index([hookName])
  @@index([priority])
  @@map("plugin_hooks")
}

// Marketplace Plugins
model MarketplacePlugin {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String
  longDescription String?
  version     String
  author      String
  authorId    String?
  category    String
  tags        String[]
  price       Decimal? @db.Decimal(10,2) // null for free plugins
  currency    String   @default("USD")
  totalDownloads Int   @default(0)
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  status      String   @default("pending") // pending, approved, rejected, suspended
  featured    Boolean  @default(false)
  screenshots Json?    // Array of screenshot URLs
  changelog   Json?    // Version changelog
  requirements Json?   // System requirements
  compatibility Json?  // Compatible versions
  downloadUrl String?
  demoUrl     String?
  supportUrl  String?
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorUser  User?    @relation("AuthoredMarketplacePlugins", fields: [authorId], references: [id], onDelete: SetNull)
  reviews     PluginReview[]
  purchases   PluginPurchase[]
  transactions PluginTransaction[] @relation("PluginTransactions")
  licenses    PluginLicense[]     @relation("PluginLicenses")
  downloads   PluginDownload[]    @relation("PluginDownloads")
  stats       PluginStat?

  @@index([category])
  @@index([status])
  @@index([featured])
  @@index([rating])
  @@map("marketplace_plugins")
}

// Plugin Reviews
model PluginReview {
  id          String   @id @default(cuid())
  pluginId    String
  userId      String
  rating      Int      // 1-5
  title       String?
  content     String?
  isVerified  Boolean  @default(false) // Verified purchase
  isHelpful   Int      @default(0) // Helpful votes
  status      String   @default("published") // published, hidden, spam
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  plugin      MarketplacePlugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  user        User              @relation("WrittenPluginReviews", fields: [userId], references: [id], onDelete: Cascade)
  votes       ReviewVote[]

  @@unique([pluginId, userId])
  @@index([pluginId])
  @@index([rating])
  @@index([status])
  @@map("plugin_reviews")
}

// Plugin Purchases
model PluginPurchase {
  id          String   @id @default(cuid())
  pluginId    String
  userId      String
  price       Decimal  @db.Decimal(10,2)
  currency    String
  status      String   @default("completed") // pending, completed, refunded, failed
  paymentMethod String?
  transactionId String?
  licenseKey  String?
  expiresAt   DateTime? // For subscription-based plugins
  purchasedAt DateTime @default(now())

  // Relations
  plugin      MarketplacePlugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  user        User              @relation("PurchasedPlugins", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pluginId, userId])
  @@index([userId])
  @@index([status])
  @@map("plugin_purchases")
}

// Hook System
model SystemHook {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  type        String   // action, filter, event
  parameters  Json?    // Expected parameters
  returnType  String?  // Expected return type
  isCore      Boolean  @default(true)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([isActive])
  @@map("system_hooks")
}

// Hook Execution Log
model HookExecution {
  id          String   @id @default(cuid())
  hookName    String
  pluginId    String?
  executionTime Float   // in milliseconds
  success     Boolean  @default(true)
  error       String?
  parameters  Json?
  result      Json?
  executedAt  DateTime @default(now())

  // Relations
  plugin      Plugin?  @relation("PluginHookExecutions", fields: [pluginId], references: [id], onDelete: SetNull)

  @@index([hookName])
  @@index([pluginId])
  @@index([executedAt])
  @@map("hook_executions")
}

// Plugin Development
model PluginDevelopment {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  developerId String
  status      String   @default("development") // development, testing, ready, published
  version     String   @default("0.1.0")
  repository  String?
  testResults Json?
  buildLogs   Json?
  lastBuild   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  developer   User     @relation("DevelopedPlugins", fields: [developerId], references: [id], onDelete: Cascade)

  @@index([developerId])
  @@index([status])
  @@map("plugin_development")
}
