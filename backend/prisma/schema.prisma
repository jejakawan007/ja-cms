generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String                     @id @default(cuid())
  email                           String                     @unique
  username                        String?                    @unique
  password                        String
  firstName                       String?
  lastName                        String?
  avatar                          String?
  bio                             String?
  isActive                        Boolean                    @default(true)
  isVerified                      Boolean                    @default(false)
  role                            UserRole                   @default(USER)
  createdAt                       DateTime                   @default(now())
  updatedAt                       DateTime                   @updatedAt
  dashboardActivities             DashboardActivity[]        @relation("UserDashboardActivities")
  dashboardSettings               DashboardSettings?         @relation("UserDashboardSettings")
  dashboardPreference             UserDashboardPreference?   @relation("UserDashboardPreferences")
  userWidgets                     UserWidget[]               @relation("UserWidgets")
  activeSessions                  ActiveSession[]            @relation("UserActiveSessions")
  analyticsEvents                 AnalyticsEvent[]           @relation("UserAnalyticsEvents")
  analyticsSessions               AnalyticsSession[]         @relation("UserAnalyticsSessions")
  userApiRequestLogs              ApiRequestLog[]            @relation("UserApiRequestLogs")
  auditLogs                       AuditLog[]                 @relation("UserAuditLogs")
  autosavedContent                AutosavedContent[]         @relation("UserAutosavedContent")
  createdBackupJobs               BackupJob[]                @relation("CreatedBackupJobs")
  blockUsage                      BlockUsageAnalytics[]      @relation("UserBlockUsage")
  createdCategoryRules            CategoryRule[]             @relation("CreatedCategoryRules")
  commentThreads                  CommentThread[]            @relation("AuthoredCommentThreads")
  commentVotes                    CommentVote[]              @relation("CommentVotes")
  comments                        Comment[]
  content                         Content[]                  @relation("UserContent")
  createdContentGaps              ContentGapAnalysis[]       @relation("CreatedContentGaps")
  assignedContentGaps             ContentGapRecommendation[] @relation("AssignedContentGaps")
  contentLocks                    ContentLock[]              @relation("ContentLocks")
  createdRevisions                ContentRevision[]          @relation("CreatedRevisions")
  createdSchedules                ContentSchedule[]          @relation("CreatedSchedules")
  createdTemplates                ContentTemplate[]          @relation("CreatedTemplates")
  createdWorkflows                ContentWorkflow[]          @relation("CreatedWorkflows")
  resolvedDatabaseAlerts          DatabaseAlert[]            @relation("ResolvedDatabaseAlerts")
  executedDatabaseCleanups        DatabaseCleanupHistory[]   @relation("ExecutedDatabaseCleanups")
  createdDatabaseOptimizationJobs DatabaseOptimizationJob[]  @relation("CreatedDatabaseOptimizationJobs")
  createdDevProjects              DevProject[]               @relation("CreatedDevProjects")
  resolvedDiagnosticAlerts        DiagnosticAlert[]          @relation("ResolvedDiagnosticAlerts")
  createdDiagnosticJobs           DiagnosticJob[]            @relation("CreatedDiagnosticJobs")
  executedDiagnostics             DiagnosticResult[]         @relation("ExecutedDiagnostics")
  resolvedComments                EditorComment[]            @relation("UserResolvedComments")
  editorComments                  EditorComment[]            @relation("UserEditorComments")
  editorSessions                  EditorSession[]            @relation("UserEditorSessions")
  createdExportJobs               ExportJob[]                @relation("CreatedExportJobs")
  createdFirewallRules            FirewallRule[]             @relation("CreatedFirewallRules")
  createdImportJobs               ImportJob[]                @relation("CreatedImportJobs")
  executedResponses               IncidentResponse[]         @relation("ExecutedResponses")
  createdIpLists                  IpList[]                   @relation("CreatedIpLists")
  likes                           Like[]
  loginAttempts                   LoginAttempt[]             @relation("UserLoginAttempts")
  triggeredMaintenanceExecutions  MaintenanceExecution[]     @relation("TriggeredMaintenanceExecutions")
  createdMaintenanceTasks         MaintenanceTask[]          @relation("CreatedMaintenanceTasks")
  authoredMarketplacePlugins      MarketplacePlugin[]        @relation("AuthoredMarketplacePlugins")
  media                           Media[]
  uploadedMediaFiles              MediaFile[]                @relation("UploadedMediaFiles")
  createdMediaFolders             MediaFolder[]              @relation("CreatedMediaFolders")
  mediaUploadSessions             MediaUploadSession[]       @relation("MediaUploadSessions")
  notifications                   Notification[]             @relation("UserNotifications")
  pageViews                       PageView[]                 @relation("UserPageViews")
  passwordHistory                 PasswordHistory[]          @relation("UserPasswordHistory")
  performanceMetrics              PerformanceMetric[]        @relation("PerformanceMetrics")
  developedPlugins                PluginDevelopment[]        @relation("DevelopedPlugins")
  userPluginDownloads             PluginDownload[]           @relation("UserPluginDownloads")
  userPluginLicenses              PluginLicense[]            @relation("UserPluginLicenses")
  purchasedPlugins                PluginPurchase[]           @relation("PurchasedPlugins")
  writtenPluginReviews            PluginReview[]             @relation("WrittenPluginReviews")
  boughtPlugins                   PluginTransaction[]        @relation("BoughtPlugins")
  soldPlugins                     PluginTransaction[]        @relation("SoldPlugins")
  installedPlugins                Plugin[]                   @relation("InstalledPlugins")
  posts                           Post[]
  rateLimitLogs                   RateLimitLog[]             @relation("RateLimitLogs")
  executedReports                 ReportExecution[]          @relation("ExecutedReports")
  createdReports                  Report[]                   @relation("CreatedReports")
  createdRestoreJobs              RestoreJob[]               @relation("CreatedRestoreJobs")
  userReviewVotes                 ReviewVote[]               @relation("UserReviewVotes")
  updatedSecurityConfigs          SecurityConfig[]           @relation("UpdatedSecurityConfigs")
  resolvedSecurityEvents          SecurityEvent[]            @relation("ResolvedSecurityEvents")
  securityEvents                  SecurityEvent[]            @relation("UserSecurityEvents")
  assignedIncidents               SecurityIncident[]         @relation("AssignedIncidents")
  reportedIncidents               SecurityIncident[]         @relation("ReportedIncidents")
  resolvedIncidents               SecurityIncident[]         @relation("ResolvedIncidents")
  createdSEOAudits                SEOAudit[]                 @relation("CreatedSEOAudits")
  sessions                        Session[]
  resolvedSystemIssues            SystemIssue[]              @relation("ResolvedSystemIssues")
  analyticsData                   UserAnalytics[]            @relation("UserAnalyticsData")
  settings                        UserSetting[]
  assignedWorkflows               WorkflowInstance[]         @relation("AssignedWorkflows")
  assignedSteps                   WorkflowStep[]             @relation("AssignedWorkflowSteps")

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model UserSetting {
  id       String @id @default(cuid())
  userId   String
  category String @default("general")
  key      String
  value    String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@map("user_settings")
}

model SiteAnalytics {
  id                String   @id @default(cuid())
  date              DateTime @unique @db.Date
  pageViews         Int      @default(0)
  uniqueVisitors    Int      @default(0)
  sessions          Int      @default(0)
  bounceRate        Float    @default(0)
  avgSessionTime    Int      @default(0)
  newVisitors       Int      @default(0)
  returningVisitors Int      @default(0)
  conversionRate    Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("site_analytics")
}

model PageView {
  id        String   @id @default(cuid())
  path      String
  title     String?
  referrer  String?
  userAgent String?
  ipAddress String?
  country   String?
  city      String?
  device    String?
  browser   String?
  os        String?
  sessionId String?
  userId    String?
  duration  Int?
  timestamp DateTime @default(now())
  user      User?    @relation("UserPageViews", fields: [userId], references: [id])

  @@index([path])
  @@index([timestamp])
  @@index([userId])
  @@map("page_views")
}

model AnalyticsSession {
  id          String    @id @default(cuid())
  sessionId   String    @unique
  userId      String?
  startTime   DateTime  @default(now())
  endTime     DateTime?
  duration    Int?
  pageViews   Int       @default(0)
  isActive    Boolean   @default(true)
  referrer    String?
  landingPage String?
  exitPage    String?
  device      String?
  browser     String?
  os          String?
  country     String?
  city        String?
  ipAddress   String?
  user        User?     @relation("UserAnalyticsSessions", fields: [userId], references: [id])

  @@index([sessionId])
  @@index([userId])
  @@index([startTime])
  @@map("analytics_sessions")
}

model ContentAnalytics {
  id            String   @id @default(cuid())
  contentId     String
  contentType   String
  date          DateTime @db.Date
  views         Int      @default(0)
  uniqueViews   Int      @default(0)
  likes         Int      @default(0)
  shares        Int      @default(0)
  comments      Int      @default(0)
  avgTimeOnPage Int      @default(0)
  bounceRate    Float    @default(0)
  exitRate      Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([contentId, contentType, date])
  @@index([contentType])
  @@index([date])
  @@map("content_analytics")
}

model UserAnalytics {
  id             String   @id @default(cuid())
  userId         String
  date           DateTime @db.Date
  sessionsCount  Int      @default(0)
  pageViews      Int      @default(0)
  timeSpent      Int      @default(0)
  actionsCount   Int      @default(0)
  postsCreated   Int      @default(0)
  postsUpdated   Int      @default(0)
  commentsPosted Int      @default(0)
  likesGiven     Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation("UserAnalyticsData", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([date])
  @@map("user_analytics")
}

model AnalyticsEvent {
  id         String   @id @default(cuid())
  eventName  String
  category   String
  action     String
  label      String?
  value      Int?
  userId     String?
  sessionId  String?
  path       String?
  properties Json?
  timestamp  DateTime @default(now())
  user       User?    @relation("UserAnalyticsEvents", fields: [userId], references: [id])

  @@index([eventName])
  @@index([category])
  @@index([userId])
  @@index([sessionId])
  @@index([timestamp])
  @@map("analytics_events")
}

model Report {
  id          String            @id @default(cuid())
  name        String
  description String?
  type        String
  config      Json
  schedule    String?
  isActive    Boolean           @default(true)
  createdBy   String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  executions  ReportExecution[]
  creator     User              @relation("CreatedReports", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([createdBy])
  @@map("reports")
}

model ReportExecution {
  id         String    @id @default(cuid())
  reportId   String
  status     String
  startTime  DateTime  @default(now())
  endTime    DateTime?
  result     Json?
  error      String?
  executedBy String?
  executor   User?     @relation("ExecutedReports", fields: [executedBy], references: [id])
  report     Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([status])
  @@index([startTime])
  @@map("report_executions")
}

model Analytics {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  date      DateTime @db.Date
  path      String
  updatedAt DateTime @updatedAt
  views     Int      @default(0)

  @@unique([path, date])
  @@map("analytics")
}

model Post {
  id              String                  @id @default(cuid())
  title           String
  slug            String                  @unique
  excerpt         String?
  content         String
  featuredImage   String?
  status          PostStatus              @default(DRAFT)
  publishedAt     DateTime?
  authorId        String
  categoryId      String?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  canonicalUrl    String?
  isHidden        Boolean                 @default(false)
  ruleExecutions  CategoryRuleExecution[]
  commentThreads  CommentThread[]         @relation("PostCommentThreads")
  comments        Comment[]
  likes           Like[]
  views           PostView[]
  author          User                    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category        Category?               @relation(fields: [categoryId], references: [id])
  seoAudits       SEOAudit[]
  seoMetadata     SEOMetadata[]
  tags            Tag[]                   @relation("PostToTag")

  @@map("posts")
}

model Category {
  id              String               @id @default(cuid())
  name            String
  slug            String               @unique
  description     String?
  parentId        String?
  isActive        Boolean              @default(true)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  color           String               @default("#6b7280")
  metaDescription String?
  metaTitle       String?
  sortOrder       Int                  @default(0)
  parent          Category?            @relation("CategoryParent", fields: [parentId], references: [id])
  children        Category[]           @relation("CategoryParent")
  rules           CategoryRule[]
  contentGaps     ContentGapAnalysis[]
  posts           Post[]
  seoAudits       SEOAudit[]
  seoMetadata     SEOMetadata[]

  @@map("categories")
}

model CategoryTemplate {
  id              String   @id @default(cuid())
  name            String
  description     String?
  slug            String   @unique
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  isActive        Boolean  @default(true)
  parentId        String?
  sortOrder       Int      @default(0)
  icon            String?
  color           String   @default("#6b7280")
  settings        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("category_templates")
}

model CategoryRule {
  id         String                  @id @default(cuid())
  name       String
  categoryId String
  conditions Json
  priority   Int                     @default(0)
  isActive   Boolean                 @default(true)
  createdBy  String
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  executions CategoryRuleExecution[]
  category   Category                @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  creator    User                    @relation("CreatedCategoryRules", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([isActive])
  @@index([priority])
  @@map("category_rules")
}

model CategoryRuleExecution {
  id              String       @id @default(cuid())
  ruleId          String
  postId          String
  executionResult Json
  confidenceScore Float        @default(0)
  executedAt      DateTime     @default(now())
  post            Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  rule            CategoryRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([ruleId])
  @@index([postId])
  @@index([executedAt])
  @@map("category_rule_executions")
}

model ContentGapAnalysis {
  id               String                     @id @default(cuid())
  categoryId       String?
  keyword          String
  searchVolume     Int                        @default(0)
  difficulty       Float                      @default(0)
  opportunity      Float                      @default(0)
  competition      Int                        @default(0)
  existingContent  Int                        @default(0)
  recommendedType  String                     @default("article")
  priority         String                     @default("medium")
  estimatedTraffic Int                        @default(0)
  estimatedRevenue Float                      @default(0)
  analysisDate     DateTime                   @default(now())
  isActive         Boolean                    @default(true)
  createdBy        String
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  category         Category?                  @relation(fields: [categoryId], references: [id])
  creator          User                       @relation("CreatedContentGaps", fields: [createdBy], references: [id], onDelete: Cascade)
  recommendations  ContentGapRecommendation[]

  @@index([categoryId])
  @@index([keyword])
  @@index([priority])
  @@index([analysisDate])
  @@map("content_gap_analyses")
}

model ContentGapRecommendation {
  id                 String             @id @default(cuid())
  gapAnalysisId      String
  title              String
  description        String
  contentType        String
  targetKeywords     Json
  estimatedWordCount Int                @default(1000)
  estimatedTime      Int                @default(60)
  priority           String             @default("medium")
  status             String             @default("pending")
  assignedTo         String?
  completedAt        DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  assignee           User?              @relation("AssignedContentGaps", fields: [assignedTo], references: [id])
  gapAnalysis        ContentGapAnalysis @relation(fields: [gapAnalysisId], references: [id], onDelete: Cascade)

  @@index([gapAnalysisId])
  @@index([status])
  @@index([priority])
  @@map("content_gap_recommendations")
}

model SEOMetadata {
  id                 String    @id @default(cuid())
  postId             String?
  categoryId         String?
  pageType           String    @default("post")
  title              String
  description        String
  keywords           String?
  canonicalUrl       String?
  ogTitle            String?
  ogDescription      String?
  ogImage            String?
  ogType             String    @default("article")
  twitterCard        String    @default("summary")
  twitterTitle       String?
  twitterDescription String?
  twitterImage       String?
  structuredData     Json?
  metaRobots         String    @default("index,follow")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  category           Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  post               Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([categoryId])
  @@index([pageType])
  @@map("seo_metadata")
}

model SEOAudit {
  id              String    @id @default(cuid())
  postId          String?
  categoryId      String?
  auditType       String
  score           Int       @default(0)
  issues          Json
  recommendations Json
  auditDate       DateTime  @default(now())
  createdBy       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  category        Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  creator         User      @relation("CreatedSEOAudits", fields: [createdBy], references: [id], onDelete: Cascade)
  post            Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([categoryId])
  @@index([auditType])
  @@index([auditDate])
  @@map("seo_audits")
}

model SitemapEntry {
  id           String   @id @default(cuid())
  url          String
  pageType     String
  priority     Float    @default(0.5)
  changeFreq   String   @default("weekly")
  lastModified DateTime @default(now())
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([url])
  @@index([pageType])
  @@index([isActive])
  @@map("sitemap_entries")
}

model PerformanceMetric {
  id         String   @id @default(cuid())
  metricType String
  value      Float
  unit       String
  endpoint   String?
  method     String?
  userId     String?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation("PerformanceMetrics", fields: [userId], references: [id])

  @@index([metricType])
  @@index([timestamp])
  @@index([endpoint])
  @@map("performance_metrics")
}

model CacheEntry {
  id           String   @id @default(cuid())
  key          String   @unique
  value        Json
  ttl          Int
  expiresAt    DateTime
  hitCount     Int      @default(0)
  lastAccessed DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([key])
  @@index([expiresAt])
  @@map("cache_entries")
}

model RateLimitLog {
  id        String   @id @default(cuid())
  ipAddress String
  endpoint  String
  method    String
  userAgent String?
  userId    String?
  blocked   Boolean  @default(false)
  reason    String?
  timestamp DateTime @default(now())
  user      User?    @relation("RateLimitLogs", fields: [userId], references: [id])

  @@index([ipAddress])
  @@index([timestamp])
  @@index([endpoint])
  @@map("rate_limit_logs")
}

model Tag {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  color       String   @default("#6b7280")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]   @relation("PostToTag")

  @@map("tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model CommentThread {
  id        String          @id @default(cuid())
  parentId  String?
  postId    String
  authorId  String
  content   String
  status    String          @default("approved")
  depth     Int             @default(0)
  path      String
  votes     Int             @default(0)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  author    User            @relation("AuthoredCommentThreads", fields: [authorId], references: [id], onDelete: Cascade)
  parent    CommentThread?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   CommentThread[] @relation("CommentReplies")
  post      Post            @relation("PostCommentThreads", fields: [postId], references: [id], onDelete: Cascade)
  votes_rel CommentVote[]

  @@index([postId])
  @@index([parentId])
  @@index([path])
  @@index([status])
  @@map("comment_threads")
}

model CommentVote {
  id        String        @id @default(cuid())
  commentId String
  userId    String
  voteType  String
  createdAt DateTime      @default(now())
  comment   CommentThread @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User          @relation("CommentVotes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@map("comment_votes")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model PostView {
  id        String   @id @default(cuid())
  postId    String
  ipAddress String?
  userAgent String?
  viewedAt  DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_views")
}

model ContentWorkflow {
  id          String             @id @default(cuid())
  name        String
  description String?
  steps       Json
  isActive    Boolean            @default(true)
  createdBy   String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  creator     User               @relation("CreatedWorkflows", fields: [createdBy], references: [id], onDelete: Cascade)
  instances   WorkflowInstance[]

  @@map("content_workflows")
}

model WorkflowInstance {
  id          String          @id @default(cuid())
  workflowId  String
  contentId   String
  contentType String
  currentStep Int             @default(0)
  status      String
  assignedTo  String?
  data        Json?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  assignee    User?           @relation("AssignedWorkflows", fields: [assignedTo], references: [id])
  workflow    ContentWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  steps       WorkflowStep[]

  @@index([workflowId])
  @@index([contentId, contentType])
  @@index([status])
  @@map("workflow_instances")
}

model WorkflowStep {
  id          String           @id @default(cuid())
  instanceId  String
  stepNumber  Int
  name        String
  status      String
  assignedTo  String?
  comments    String?
  completedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  assignee    User?            @relation("AssignedWorkflowSteps", fields: [assignedTo], references: [id])
  instance    WorkflowInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@unique([instanceId, stepNumber])
  @@index([status])
  @@map("workflow_steps")
}

model ContentRevision {
  id          String   @id @default(cuid())
  contentId   String
  contentType String
  version     Int
  title       String?
  content     String?
  metadata    Json?
  changes     Json?
  createdBy   String
  createdAt   DateTime @default(now())
  creator     User     @relation("CreatedRevisions", fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([contentId, contentType, version])
  @@index([contentId, contentType])
  @@index([createdAt])
  @@map("content_revisions")
}

model ContentLock {
  id          String   @id @default(cuid())
  contentId   String
  contentType String
  lockedBy    String
  lockedAt    DateTime @default(now())
  expiresAt   DateTime
  user        User     @relation("ContentLocks", fields: [lockedBy], references: [id], onDelete: Cascade)

  @@unique([contentId, contentType])
  @@index([expiresAt])
  @@map("content_locks")
}

model ContentTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String
  template    Json
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User     @relation("CreatedTemplates", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([isActive])
  @@map("content_templates")
}

model ContentSchedule {
  id          String    @id @default(cuid())
  contentId   String
  contentType String
  action      String
  scheduledAt DateTime
  status      String
  executedAt  DateTime?
  error       String?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  creator     User      @relation("CreatedSchedules", fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([contentId, contentType, action])
  @@index([scheduledAt])
  @@index([status])
  @@map("content_schedules")
}

model Content {
  id               String             @id @default(cuid())
  title            String
  type             String
  content          Json
  authorId         String
  status           String             @default("draft")
  version          Int                @default(1)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  autosavedContent AutosavedContent[] @relation("ContentAutosavedContent")
  author           User               @relation("UserContent", fields: [authorId], references: [id], onDelete: Cascade)
  editorComments   EditorComment[]    @relation("ContentEditorComments")
  editorSessions   EditorSession[]    @relation("ContentEditorSessions")

  @@index([authorId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("content")
}

model EditorSession {
  id           String    @id @default(cuid())
  contentId    String
  contentType  String
  userId       String
  sessionData  Json?
  lastActivity DateTime  @default(now())
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  content      Content   @relation("ContentEditorSessions", fields: [contentId], references: [id], onDelete: Cascade)
  user         User      @relation("UserEditorSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([userId])
  @@index([lastActivity])
  @@map("editor_sessions")
}

model AutosavedContent {
  id            String   @id @default(cuid())
  contentId     String
  userId        String
  contentData   Json
  versionNumber Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  content       Content  @relation("ContentAutosavedContent", fields: [contentId], references: [id], onDelete: Cascade)
  user          User     @relation("UserAutosavedContent", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([contentId, userId])
  @@index([contentId])
  @@index([userId])
  @@map("autosaved_content")
}

model EditorComment {
  id           String    @id @default(cuid())
  contentId    String
  userId       String
  positionData Json?
  resolved     Boolean   @default(false)
  resolvedBy   String?
  resolvedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  commentText  String
  content      Content   @relation("ContentEditorComments", fields: [contentId], references: [id], onDelete: Cascade)
  resolver     User?     @relation("UserResolvedComments", fields: [resolvedBy], references: [id])
  user         User      @relation("UserEditorComments", fields: [userId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([userId])
  @@index([resolved])
  @@map("editor_comments")
}

model BlockUsageAnalytics {
  id         String   @id @default(cuid())
  blockType  String
  userId     String?
  contentId  String?
  usageCount Int      @default(1)
  date       DateTime @db.Date
  createdAt  DateTime @default(now())
  user       User?    @relation("UserBlockUsage", fields: [userId], references: [id])

  @@unique([blockType, userId, date])
  @@index([blockType])
  @@index([date])
  @@map("block_usage_analytics")
}

model ContentAnalysisCache {
  id             String    @id @default(cuid())
  contentHash    String
  analysisType   String
  analysisResult Json
  expiresAt      DateTime?
  createdAt      DateTime  @default(now())

  @@unique([contentHash, analysisType])
  @@index([contentHash])
  @@index([expiresAt])
  @@map("content_analysis_cache")
}

model Media {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  alt          String?
  caption      String?
  uploadedBy   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploader     User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("media")
}

model Menu {
  id        String     @id @default(cuid())
  name      String
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  location  String
  items     MenuItem[]

  @@map("menus")
}

model MenuItem {
  id        String     @id @default(cuid())
  menuId    String
  title     String
  url       String?
  target    String     @default("_self")
  order     Int        @default(0)
  parentId  String?
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cssClass  String?
  menu      Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  parent    MenuItem?  @relation("MenuItemParent", fields: [parentId], references: [id], onDelete: Cascade)
  children  MenuItem[] @relation("MenuItemParent")

  @@map("menu_items")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category  String   @default("general")
  type      String   @default("string")

  @@map("settings")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String?
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String   @default("info")
  user      User?    @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@map("notifications")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  changes    Json?
  resource   String
  resourceId String?
  user       User?    @relation("UserAuditLogs", fields: [userId], references: [id])

  @@index([action])
  @@index([resource])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

model Theme {
  id           String   @id @default(cuid())
  name         String
  description  String?
  category     String   @default("dashboard")
  isActive     Boolean  @default(false)
  isDefault    Boolean  @default(false)
  colors       Json
  typography   Json
  spacing      Json
  borderRadius Json
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("themes")
}

model MediaFile {
  id               String               @id @default(cuid())
  filename         String
  originalName     String
  mimeType         String
  size             Int
  width            Int?
  height           Int?
  duration         Int?
  url              String
  thumbnailUrl     String?
  alt              String?
  caption          String?
  description      String?
  folderId         String?
  uploadedBy       String
  processingStatus String               @default("pending")
  metadata         Json?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  analytics        MediaAnalytics[]     @relation("MediaAnalyticsData")
  cdnCache         MediaCdnCache[]
  folder           MediaFolder?         @relation(fields: [folderId], references: [id])
  uploader         User                 @relation("UploadedMediaFiles", fields: [uploadedBy], references: [id], onDelete: Cascade)
  processingJobs   MediaProcessingJob[]
  searchIndex      MediaSearchIndex?    @relation("MediaSearchData")
  tags             MediaTag[]           @relation("MediaFileToMediaTag")

  @@index([folderId])
  @@index([mimeType])
  @@index([uploadedBy])
  @@index([processingStatus])
  @@map("media_files")
}

model MediaFolder {
  id             String               @id @default(cuid())
  name           String
  slug           String
  description    String?
  parentId       String?
  path           String
  isPublic       Boolean              @default(false)
  permissions    Json?
  createdBy      String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  files          MediaFile[]
  creator        User                 @relation("CreatedMediaFolders", fields: [createdBy], references: [id], onDelete: Cascade)
  parent         MediaFolder?         @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children       MediaFolder[]        @relation("FolderHierarchy")
  uploadSessions MediaUploadSession[] @relation("FolderUploadSessions")

  @@unique([parentId, slug])
  @@index([path])
  @@index([createdBy])
  @@map("media_folders")
}

model MediaTag {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String      @unique
  color       String      @default("#6b7280")
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  files       MediaFile[] @relation("MediaFileToMediaTag")

  @@map("media_tags")
}

model MediaProcessingJob {
  id          String    @id @default(cuid())
  mediaId     String
  type        String
  status      String    @default("pending")
  parameters  Json
  inputPath   String
  outputPath  String?
  progress    Int       @default(0)
  startedAt   DateTime?
  completedAt DateTime?
  error       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  media       MediaFile @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@index([mediaId])
  @@index([status])
  @@index([type])
  @@map("media_processing_jobs")
}

model MediaCdnCache {
  id        String    @id @default(cuid())
  mediaId   String
  cdnUrl    String
  region    String
  size      Int
  hits      Int       @default(0)
  lastHit   DateTime?
  expiresAt DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  media     MediaFile @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([mediaId, region])
  @@index([expiresAt])
  @@index([isActive])
  @@map("media_cdn_cache")
}

model MediaAnalytics {
  id          String    @id @default(cuid())
  mediaId     String
  date        DateTime  @db.Date
  views       Int       @default(0)
  downloads   Int       @default(0)
  bandwidth   BigInt    @default(0)
  uniqueViews Int       @default(0)
  referrers   Json?
  countries   Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  media       MediaFile @relation("MediaAnalyticsData", fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([mediaId, date])
  @@index([date])
  @@map("media_analytics")
}

model MediaUploadSession {
  id            String       @id @default(cuid())
  sessionId     String       @unique
  userId        String
  totalFiles    Int
  uploadedFiles Int          @default(0)
  totalSize     BigInt
  uploadedSize  BigInt       @default(0)
  status        String       @default("active")
  folderId      String?
  metadata      Json?
  startedAt     DateTime     @default(now())
  completedAt   DateTime?
  expiresAt     DateTime
  folder        MediaFolder? @relation("FolderUploadSessions", fields: [folderId], references: [id])
  user          User         @relation("MediaUploadSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
  @@map("media_upload_sessions")
}

model MediaSearchIndex {
  id          String    @id @default(cuid())
  mediaId     String    @unique
  searchText  String
  keywords    String[]
  lastIndexed DateTime  @default(now())
  media       MediaFile @relation("MediaSearchData", fields: [mediaId], references: [id], onDelete: Cascade)

  @@index([keywords])
  @@map("media_search_index")
}

model SecurityEvent {
  id          String    @id @default(cuid())
  type        String
  severity    String
  source      String
  description String
  ipAddress   String?
  userAgent   String?
  userId      String?
  metadata    Json?
  isResolved  Boolean   @default(false)
  resolvedBy  String?
  resolvedAt  DateTime?
  createdAt   DateTime  @default(now())
  resolver    User?     @relation("ResolvedSecurityEvents", fields: [resolvedBy], references: [id])
  user        User?     @relation("UserSecurityEvents", fields: [userId], references: [id])

  @@index([type])
  @@index([severity])
  @@index([ipAddress])
  @@index([userId])
  @@index([createdAt])
  @@map("security_events")
}

model FirewallRule {
  id          String    @id @default(cuid())
  name        String
  description String?
  type        String
  action      String
  priority    Int       @default(0)
  conditions  Json
  isActive    Boolean   @default(true)
  hitCount    Int       @default(0)
  lastHit     DateTime?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  creator     User      @relation("CreatedFirewallRules", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([priority])
  @@index([isActive])
  @@map("firewall_rules")
}

model IpList {
  id        String    @id @default(cuid())
  ipAddress String
  type      String
  reason    String?
  isActive  Boolean   @default(true)
  expiresAt DateTime?
  hitCount  Int       @default(0)
  lastHit   DateTime?
  addedBy   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  creator   User      @relation("CreatedIpLists", fields: [addedBy], references: [id], onDelete: Cascade)

  @@unique([ipAddress, type])
  @@index([type])
  @@index([isActive])
  @@index([expiresAt])
  @@map("ip_lists")
}

model SecurityIncident {
  id              String             @id @default(cuid())
  title           String
  description     String
  severity        String
  status          String             @default("open")
  category        String
  affectedSystems Json?
  timeline        Json?
  assignedTo      String?
  reportedBy      String?
  resolvedBy      String?
  reportedAt      DateTime           @default(now())
  resolvedAt      DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  responses       IncidentResponse[]
  assignee        User?              @relation("AssignedIncidents", fields: [assignedTo], references: [id])
  reporter        User?              @relation("ReportedIncidents", fields: [reportedBy], references: [id])
  resolver        User?              @relation("ResolvedIncidents", fields: [resolvedBy], references: [id])

  @@index([severity])
  @@index([status])
  @@index([category])
  @@index([assignedTo])
  @@map("security_incidents")
}

model IncidentResponse {
  id          String           @id @default(cuid())
  incidentId  String
  action      String
  description String
  status      String           @default("pending")
  executedBy  String?
  executedAt  DateTime?
  result      String?
  createdAt   DateTime         @default(now())
  executor    User?            @relation("ExecutedResponses", fields: [executedBy], references: [id])
  incident    SecurityIncident @relation(fields: [incidentId], references: [id], onDelete: Cascade)

  @@index([incidentId])
  @@index([status])
  @@map("incident_responses")
}

model ActiveSession {
  id           String   @id @default(cuid())
  userId       String
  sessionId    String   @unique
  ipAddress    String
  userAgent    String?
  location     String?
  device       String?
  isActive     Boolean  @default(true)
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  user         User     @relation("UserActiveSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
  @@index([expiresAt])
  @@map("active_sessions")
}

model PasswordHistory {
  id           String   @id @default(cuid())
  userId       String
  passwordHash String
  createdAt    DateTime @default(now())
  user         User     @relation("UserPasswordHistory", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("password_history")
}

model LoginAttempt {
  id            String   @id @default(cuid())
  email         String?
  ipAddress     String
  userAgent     String?
  success       Boolean  @default(false)
  failureReason String?
  userId        String?
  createdAt     DateTime @default(now())
  user          User?    @relation("UserLoginAttempts", fields: [userId], references: [id])

  @@index([email])
  @@index([ipAddress])
  @@index([success])
  @@index([createdAt])
  @@map("login_attempts")
}

model SecurityConfig {
  id          String   @id @default(cuid())
  category    String
  key         String
  value       Json
  description String?
  isActive    Boolean  @default(true)
  updatedBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updater     User     @relation("UpdatedSecurityConfigs", fields: [updatedBy], references: [id], onDelete: Cascade)

  @@unique([category, key])
  @@index([category])
  @@index([isActive])
  @@map("security_configs")
}

model ImportJob {
  id             String      @id @default(cuid())
  name           String
  type           String
  source         String
  status         String      @default("pending")
  progress       Int         @default(0)
  totalItems     Int         @default(0)
  processedItems Int         @default(0)
  successItems   Int         @default(0)
  failedItems    Int         @default(0)
  config         Json?
  mapping        Json?
  filePath       String?
  results        Json?
  error          String?
  startedAt      DateTime?
  completedAt    DateTime?
  createdBy      String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  creator        User        @relation("CreatedImportJobs", fields: [createdBy], references: [id], onDelete: Cascade)
  logs           ImportLog[]

  @@index([type])
  @@index([status])
  @@index([createdBy])
  @@map("import_jobs")
}

model ExportJob {
  id             String      @id @default(cuid())
  name           String
  type           String
  format         String
  status         String      @default("pending")
  progress       Int         @default(0)
  totalItems     Int         @default(0)
  processedItems Int         @default(0)
  config         Json?
  filters        Json?
  filePath       String?
  fileSize       BigInt?
  downloadUrl    String?
  expiresAt      DateTime?
  error          String?
  startedAt      DateTime?
  completedAt    DateTime?
  createdBy      String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  creator        User        @relation("CreatedExportJobs", fields: [createdBy], references: [id], onDelete: Cascade)
  logs           ExportLog[]

  @@index([type])
  @@index([status])
  @@index([createdBy])
  @@index([expiresAt])
  @@map("export_jobs")
}

model ImportLog {
  id        String    @id @default(cuid())
  jobId     String
  level     String
  message   String
  details   Json?
  itemIndex Int?
  createdAt DateTime  @default(now())
  job       ImportJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([level])
  @@map("import_logs")
}

model ExportLog {
  id        String    @id @default(cuid())
  jobId     String
  level     String
  message   String
  details   Json?
  itemIndex Int?
  createdAt DateTime  @default(now())
  job       ExportJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([level])
  @@map("export_logs")
}

model BackupJob {
  id          String       @id @default(cuid())
  name        String
  type        String
  status      String       @default("pending")
  progress    Int          @default(0)
  size        BigInt?
  location    String?
  storageType String
  compression String       @default("gzip")
  encryption  Boolean      @default(false)
  config      Json?
  checksum    String?
  error       String?
  startedAt   DateTime?
  completedAt DateTime?
  expiresAt   DateTime?
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creator     User         @relation("CreatedBackupJobs", fields: [createdBy], references: [id], onDelete: Cascade)
  restores    RestoreJob[]

  @@index([type])
  @@index([status])
  @@index([createdBy])
  @@index([expiresAt])
  @@map("backup_jobs")
}

model RestoreJob {
  id          String    @id @default(cuid())
  name        String
  backupId    String
  type        String
  status      String    @default("pending")
  progress    Int       @default(0)
  config      Json?
  selections  Json?
  error       String?
  startedAt   DateTime?
  completedAt DateTime?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  backup      BackupJob @relation(fields: [backupId], references: [id], onDelete: Cascade)
  creator     User      @relation("CreatedRestoreJobs", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([backupId])
  @@index([status])
  @@index([createdBy])
  @@map("restore_jobs")
}

model DiagnosticResult {
  id          String   @id @default(cuid())
  category    String
  test        String
  status      String
  message     String
  details     Json?
  metrics     Json?
  suggestions Json?
  severity    String   @default("info")
  executedAt  DateTime @default(now())
  executedBy  String?
  executor    User?    @relation("ExecutedDiagnostics", fields: [executedBy], references: [id])

  @@index([category])
  @@index([status])
  @@index([severity])
  @@index([executedAt])
  @@map("diagnostic_results")
}

model MaintenanceTask {
  id           String                 @id @default(cuid())
  name         String
  description  String?
  type         String
  schedule     String?
  status       String                 @default("pending")
  priority     String                 @default("normal")
  config       Json?
  lastRun      DateTime?
  nextRun      DateTime?
  runCount     Int                    @default(0)
  successCount Int                    @default(0)
  failureCount Int                    @default(0)
  avgDuration  Int?
  isActive     Boolean                @default(true)
  createdBy    String
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  executions   MaintenanceExecution[]
  creator      User                   @relation("CreatedMaintenanceTasks", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([status])
  @@index([nextRun])
  @@index([isActive])
  @@map("maintenance_tasks")
}

model MaintenanceExecution {
  id          String          @id @default(cuid())
  taskId      String
  status      String          @default("running")
  startedAt   DateTime        @default(now())
  completedAt DateTime?
  duration    Int?
  output      String?
  error       String?
  triggeredBy String?
  task        MaintenanceTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  trigger     User?           @relation("TriggeredMaintenanceExecutions", fields: [triggeredBy], references: [id])

  @@index([taskId])
  @@index([status])
  @@index([startedAt])
  @@map("maintenance_executions")
}

model Plugin {
  id             String              @id @default(cuid())
  name           String
  slug           String              @unique
  version        String
  description    String?
  author         String
  authorEmail    String?
  website        String?
  repository     String?
  license        String?
  status         String              @default("inactive")
  type           String              @default("plugin")
  category       String?
  config         Json?
  manifest       Json
  dependencies   Json?
  permissions    Json?
  hooks          Json?
  installPath    String
  isCore         Boolean             @default(false)
  installedBy    String
  installedAt    DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  apiRequestLogs ApiRequestLog[]     @relation("PluginApiRequestLogs")
  eventListeners EventListener[]     @relation("PluginEventListeners")
  hookCallbacks  HookCallback[]      @relation("PluginHookCallbacks")
  hookExecutions HookExecution[]     @relation("PluginHookExecutions")
  hookMetrics    HookMetric[]        @relation("PluginHookMetrics")
  apiEndpoints   PluginApiEndpoint[] @relation("PluginApiEndpoints")
  hooks_rel      PluginHook[]
  settings       PluginSetting[]
  installer      User                @relation("InstalledPlugins", fields: [installedBy], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([type])
  @@index([category])
  @@map("plugins")
}

model PluginSetting {
  id          String   @id @default(cuid())
  pluginId    String
  key         String
  value       Json
  type        String   @default("string")
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  plugin      Plugin   @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@unique([pluginId, key])
  @@index([pluginId])
  @@map("plugin_settings")
}

model PluginHook {
  id        String   @id @default(cuid())
  pluginId  String
  hookName  String
  callback  String
  priority  Int      @default(10)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plugin    Plugin   @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@unique([pluginId, hookName, callback])
  @@index([hookName])
  @@index([priority])
  @@map("plugin_hooks")
}

model MarketplacePlugin {
  id              String              @id @default(cuid())
  slug            String              @unique
  name            String
  description     String
  longDescription String?
  version         String
  author          String
  authorId        String?
  category        String
  tags            String[]
  price           Decimal?            @db.Decimal(10, 2)
  currency        String              @default("USD")
  totalDownloads  Int                 @default(0)
  rating          Float               @default(0)
  reviewCount     Int                 @default(0)
  status          String              @default("pending")
  featured        Boolean             @default(false)
  screenshots     Json?
  changelog       Json?
  requirements    Json?
  compatibility   Json?
  downloadUrl     String?
  demoUrl         String?
  supportUrl      String?
  publishedAt     DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  authorUser      User?               @relation("AuthoredMarketplacePlugins", fields: [authorId], references: [id])
  downloads       PluginDownload[]    @relation("PluginDownloads")
  licenses        PluginLicense[]     @relation("PluginLicenses")
  purchases       PluginPurchase[]
  reviews         PluginReview[]
  stats           PluginStat?
  transactions    PluginTransaction[] @relation("PluginTransactions")

  @@index([category])
  @@index([status])
  @@index([featured])
  @@index([rating])
  @@map("marketplace_plugins")
}

model PluginReview {
  id         String            @id @default(cuid())
  pluginId   String
  userId     String
  rating     Int
  title      String?
  content    String?
  isVerified Boolean           @default(false)
  isHelpful  Int               @default(0)
  status     String            @default("published")
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  plugin     MarketplacePlugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  user       User              @relation("WrittenPluginReviews", fields: [userId], references: [id], onDelete: Cascade)
  votes      ReviewVote[]

  @@unique([pluginId, userId])
  @@index([pluginId])
  @@index([rating])
  @@index([status])
  @@map("plugin_reviews")
}

model PluginPurchase {
  id            String            @id @default(cuid())
  pluginId      String
  userId        String
  price         Decimal           @db.Decimal(10, 2)
  currency      String
  status        String            @default("completed")
  paymentMethod String?
  transactionId String?
  licenseKey    String?
  expiresAt     DateTime?
  purchasedAt   DateTime          @default(now())
  plugin        MarketplacePlugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  user          User              @relation("PurchasedPlugins", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pluginId, userId])
  @@index([userId])
  @@index([status])
  @@map("plugin_purchases")
}

model SystemHook {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  type        String
  parameters  Json?
  returnType  String?
  isCore      Boolean  @default(true)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([isActive])
  @@map("system_hooks")
}

model HookExecution {
  id            String   @id @default(cuid())
  hookName      String
  pluginId      String?
  executionTime Float
  success       Boolean  @default(true)
  error         String?
  parameters    Json?
  result        Json?
  executedAt    DateTime @default(now())
  plugin        Plugin?  @relation("PluginHookExecutions", fields: [pluginId], references: [id])

  @@index([hookName])
  @@index([pluginId])
  @@index([executedAt])
  @@map("hook_executions")
}

model PluginDevelopment {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  developerId String
  status      String    @default("development")
  version     String    @default("0.1.0")
  repository  String?
  testResults Json?
  buildLogs   Json?
  lastBuild   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  developer   User      @relation("DevelopedPlugins", fields: [developerId], references: [id], onDelete: Cascade)

  @@index([developerId])
  @@index([status])
  @@map("plugin_development")
}

model DiagnosticJob {
  id          String        @id @default(cuid())
  name        String
  type        String
  scope       String
  targets     Json
  status      String        @default("pending")
  progress    Int           @default(0)
  config      Json?
  results     Json?
  startedAt   DateTime?
  completedAt DateTime?
  createdBy   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  creator     User          @relation("CreatedDiagnosticJobs", fields: [createdBy], references: [id], onDelete: Cascade)
  issues      SystemIssue[]

  @@index([type])
  @@index([status])
  @@index([createdBy])
  @@map("diagnostic_jobs")
}

model SystemIssue {
  id                     String                       @id @default(cuid())
  jobId                  String?
  type                   String
  category               String
  severity               String
  title                  String
  description            String
  details                Json?
  affectedComponents     Json?
  recommendations        Json?
  status                 String                       @default("open")
  resolvedBy             String?
  resolvedAt             DateTime?
  createdAt              DateTime                     @default(now())
  updatedAt              DateTime                     @updatedAt
  troubleshootingHistory AutoTroubleshootingHistory[]
  diagnosticJob          DiagnosticJob?               @relation(fields: [jobId], references: [id])
  resolver               User?                        @relation("ResolvedSystemIssues", fields: [resolvedBy], references: [id])

  @@index([type])
  @@index([severity])
  @@index([status])
  @@index([jobId])
  @@map("system_issues")
}

model PerformanceProfile {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  duration    Int
  metrics     Json
  traces      Json?
  bottlenecks Json?
  context     Json?
  createdAt   DateTime @default(now())

  @@index([timestamp])
  @@map("performance_profiles")
}

model ErrorTracking {
  id         String    @id @default(cuid())
  trackingId String    @unique
  startTime  DateTime  @default(now())
  endTime    DateTime?
  duration   Int?
  errorCount Int       @default(0)
  errors     Json
  context    Json?
  resolved   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([trackingId])
  @@index([resolved])
  @@map("error_tracking")
}

model TroubleshootingSolution {
  id               String                       @id @default(cuid())
  name             String
  description      String
  category         String
  applicableIssues Json
  steps            Json
  automatable      Boolean                      @default(false)
  successRate      Float                        @default(0)
  riskLevel        String                       @default("low")
  requirements     Json?
  createdAt        DateTime                     @default(now())
  updatedAt        DateTime                     @updatedAt
  applications     AutoTroubleshootingHistory[]

  @@index([category])
  @@index([automatable])
  @@map("troubleshooting_solutions")
}

model AutoTroubleshootingHistory {
  id               String                   @id @default(cuid())
  issueId          String?
  solutionId       String?
  success          Boolean                  @default(false)
  appliedSolutions Json?
  results          Json?
  duration         Int?
  error            String?
  createdAt        DateTime                 @default(now())
  issue            SystemIssue?             @relation(fields: [issueId], references: [id])
  solution         TroubleshootingSolution? @relation(fields: [solutionId], references: [id])

  @@index([issueId])
  @@index([solutionId])
  @@index([success])
  @@map("auto_troubleshooting_history")
}

model SystemHealthMetric {
  id                  String   @id @default(cuid())
  timestamp           DateTime @default(now())
  overallScore        Int
  categoryScores      Json
  activeIssuesCount   Int      @default(0)
  criticalIssuesCount Int      @default(0)
  performanceScore    Int      @default(100)
  securityScore       Int      @default(100)
  stabilityScore      Int      @default(100)
  metrics             Json
  recommendations     Json?
  createdAt           DateTime @default(now())

  @@index([timestamp])
  @@index([overallScore])
  @@map("system_health_metrics")
}

model DiagnosticAlert {
  id           String    @id @default(cuid())
  alertType    String
  severity     String
  title        String
  description  String
  metric       String?
  threshold    Float?
  currentValue Float?
  conditions   Json?
  isActive     Boolean   @default(true)
  isResolved   Boolean   @default(false)
  resolvedBy   String?
  resolvedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  resolver     User?     @relation("ResolvedDiagnosticAlerts", fields: [resolvedBy], references: [id])

  @@index([alertType])
  @@index([severity])
  @@index([isActive])
  @@index([isResolved])
  @@map("diagnostic_alerts")
}

model DatabaseOptimizationJob {
  id          String    @id @default(cuid())
  name        String
  type        String
  targets     Json
  status      String    @default("pending")
  progress    Int       @default(0)
  config      Json?
  results     Json?
  performance Json?
  startedAt   DateTime?
  completedAt DateTime?
  duration    Int?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  creator     User      @relation("CreatedDatabaseOptimizationJobs", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([status])
  @@index([createdBy])
  @@map("database_optimization_jobs")
}

model DatabaseMetric {
  id                 String   @id @default(cuid())
  timestamp          DateTime @default(now())
  performanceMetrics Json
  storageMetrics     Json
  connectionMetrics  Json
  replicationMetrics Json?
  lockMetrics        Json?
  cacheMetrics       Json?
  createdAt          DateTime @default(now())

  @@index([timestamp])
  @@map("database_metrics")
}

model SlowQuery {
  id            String   @id @default(cuid())
  queryHash     String
  sqlText       String
  executionTime Float
  lockTime      Float
  rowsExamined  Int?
  rowsSent      Int?
  database      String?
  userId        String?
  hostInfo      String?
  timestamp     DateTime @default(now())
  frequency     Int      @default(1)
  lastSeen      DateTime @default(now())

  @@index([queryHash])
  @@index([executionTime])
  @@index([timestamp])
  @@map("slow_queries")
}

model DatabaseAlert {
  id             String    @id @default(cuid())
  alertType      String
  metricName     String
  thresholdValue Float
  currentValue   Float
  severity       String
  message        String
  details        Json?
  isActive       Boolean   @default(true)
  isResolved     Boolean   @default(false)
  resolvedBy     String?
  resolvedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  resolver       User?     @relation("ResolvedDatabaseAlerts", fields: [resolvedBy], references: [id])

  @@index([alertType])
  @@index([severity])
  @@index([isActive])
  @@map("database_alerts")
}

model DatabaseCleanupHistory {
  id           String    @id @default(cuid())
  cleanupType  String
  startedAt    DateTime  @default(now())
  completedAt  DateTime?
  duration     Int?
  itemsCleaned Int       @default(0)
  spaceSaved   BigInt    @default(0)
  details      Json?
  success      Boolean   @default(true)
  error        String?
  triggeredBy  String
  executedBy   String?
  executor     User?     @relation("ExecutedDatabaseCleanups", fields: [executedBy], references: [id])

  @@index([cleanupType])
  @@index([startedAt])
  @@map("database_cleanup_history")
}

model TableAnalysisCache {
  id           String   @id @default(cuid())
  tableName    String
  schemaName   String   @default("public")
  analysisData Json
  rowCount     BigInt?
  tableSize    BigInt?
  indexSize    BigInt?
  lastAnalyzed DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([tableName, schemaName])
  @@index([lastAnalyzed])
  @@map("table_analysis_cache")
}

model ConnectionPoolStat {
  id                String   @id @default(cuid())
  timestamp         DateTime @default(now())
  activeConnections Int      @default(0)
  idleConnections   Int      @default(0)
  totalConnections  Int      @default(0)
  maxConnections    Int      @default(0)
  connectionWaits   Int      @default(0)
  averageWaitTime   Float    @default(0)
  poolUtilization   Float    @default(0)
  createdAt         DateTime @default(now())

  @@index([timestamp])
  @@map("connection_pool_stats")
}

model QueryPerformanceHistory {
  id            String   @id @default(cuid())
  queryHash     String
  timestamp     DateTime @default(now())
  executionTime Float
  planHash      String?
  cacheHit      Boolean  @default(false)
  indexesUsed   Json?
  estimatedCost Float?
  actualCost    Float?
  createdAt     DateTime @default(now())

  @@index([queryHash])
  @@index([timestamp])
  @@index([executionTime])
  @@map("query_performance_history")
}

model DevProject {
  id           String         @id @default(cuid())
  name         String
  path         String
  templateId   String?
  manifest     Json
  status       String         @default("active")
  version      String         @default("0.1.0")
  description  String?
  repository   String?
  createdBy    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  buildHistory BuildHistory[]
  devLogs      DevLog[]
  creator      User           @relation("CreatedDevProjects", fields: [createdBy], references: [id], onDelete: Cascade)
  testResults  TestResult[]

  @@index([status])
  @@index([createdBy])
  @@map("dev_projects")
}

model TestResult {
  id         String     @id @default(cuid())
  projectId  String
  suiteName  String
  testName   String
  status     String
  duration   Int?
  error      String?
  output     String?
  coverage   Json?
  assertions Int?
  createdAt  DateTime   @default(now())
  project    DevProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([suiteName])
  @@map("test_results")
}

model BuildHistory {
  id          String     @id @default(cuid())
  projectId   String
  version     String
  status      String
  artifacts   Json?
  duration    Int?
  size        BigInt?
  logs        String?
  error       String?
  triggeredBy String
  startedAt   DateTime   @default(now())
  completedAt DateTime?
  project     DevProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([version])
  @@map("build_history")
}

model DevLog {
  id        String     @id @default(cuid())
  projectId String
  level     String
  message   String
  context   Json?
  component String?
  timestamp DateTime   @default(now())
  project   DevProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([level])
  @@index([timestamp])
  @@map("dev_logs")
}

model HookCallback {
  id         String   @id @default(cuid())
  hookName   String
  pluginId   String
  callbackId String
  priority   Int      @default(10)
  isActive   Boolean  @default(true)
  conditions Json?
  config     Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  plugin     Plugin   @relation("PluginHookCallbacks", fields: [pluginId], references: [id], onDelete: Cascade)

  @@unique([pluginId, hookName, callbackId])
  @@index([hookName])
  @@index([priority])
  @@map("hook_callbacks")
}

model PluginApiEndpoint {
  id          String          @id @default(cuid())
  pluginId    String
  path        String
  method      String
  handlerName String
  description String?
  parameters  Json?
  responses   Json?
  middleware  Json?
  rateLimit   Json?
  isPublic    Boolean         @default(false)
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  requestLogs ApiRequestLog[]
  plugin      Plugin          @relation("PluginApiEndpoints", fields: [pluginId], references: [id], onDelete: Cascade)

  @@unique([pluginId, path, method])
  @@index([path])
  @@index([method])
  @@map("plugin_api_endpoints")
}

model HookMetric {
  id            String   @id @default(cuid())
  hookName      String
  executionTime Float
  callbackCount Int
  success       Boolean  @default(true)
  error         String?
  pluginId      String?
  context       Json?
  timestamp     DateTime @default(now())
  plugin        Plugin?  @relation("PluginHookMetrics", fields: [pluginId], references: [id])

  @@index([hookName])
  @@index([executionTime])
  @@index([timestamp])
  @@map("hook_metrics")
}

model ApiRequestLog {
  id           String             @id @default(cuid())
  endpointId   String?
  pluginId     String
  method       String
  path         String
  statusCode   Int
  responseTime Int
  requestSize  Int?
  responseSize Int?
  userAgent    String?
  ipAddress    String?
  userId       String?
  error        String?
  timestamp    DateTime           @default(now())
  endpoint     PluginApiEndpoint? @relation(fields: [endpointId], references: [id])
  plugin       Plugin             @relation("PluginApiRequestLogs", fields: [pluginId], references: [id], onDelete: Cascade)
  user         User?              @relation("UserApiRequestLogs", fields: [userId], references: [id])

  @@index([pluginId])
  @@index([path])
  @@index([statusCode])
  @@index([timestamp])
  @@map("api_request_logs")
}

model EventListener {
  id         String   @id @default(cuid())
  eventName  String
  pluginId   String
  callbackId String
  priority   Int      @default(10)
  conditions Json?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  plugin     Plugin   @relation("PluginEventListeners", fields: [pluginId], references: [id], onDelete: Cascade)

  @@unique([pluginId, eventName, callbackId])
  @@index([eventName])
  @@index([priority])
  @@map("event_listeners")
}

model PluginTransaction {
  id            String            @id @default(cuid())
  pluginId      String
  buyerId       String
  sellerId      String
  amount        Decimal           @db.Decimal(10, 2)
  currency      String            @default("USD")
  status        String            @default("pending")
  paymentMethod String?
  transactionId String?
  fees          Decimal?          @db.Decimal(10, 2)
  netAmount     Decimal?          @db.Decimal(10, 2)
  metadata      Json?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  licenses      PluginLicense[]
  buyer         User              @relation("BoughtPlugins", fields: [buyerId], references: [id], onDelete: Cascade)
  plugin        MarketplacePlugin @relation("PluginTransactions", fields: [pluginId], references: [id], onDelete: Cascade)
  seller        User              @relation("SoldPlugins", fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([pluginId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([status])
  @@map("plugin_transactions")
}

model PluginLicense {
  id              String            @id @default(cuid())
  pluginId        String
  transactionId   String
  userId          String
  licenseKey      String            @unique
  type            String            @default("standard")
  maxInstalls     Int               @default(1)
  currentInstalls Int               @default(0)
  isActive        Boolean           @default(true)
  expiresAt       DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  downloads       PluginDownload[]  @relation("LicenseDownloads")
  plugin          MarketplacePlugin @relation("PluginLicenses", fields: [pluginId], references: [id], onDelete: Cascade)
  transaction     PluginTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  user            User              @relation("UserPluginLicenses", fields: [userId], references: [id], onDelete: Cascade)

  @@index([pluginId])
  @@index([userId])
  @@index([licenseKey])
  @@index([isActive])
  @@map("plugin_licenses")
}

model PluginDownload {
  id           String            @id @default(cuid())
  pluginId     String
  version      String
  userId       String?
  licenseId    String?
  ipAddress    String?
  userAgent    String?
  downloadedAt DateTime          @default(now())
  license      PluginLicense?    @relation("LicenseDownloads", fields: [licenseId], references: [id])
  plugin       MarketplacePlugin @relation("PluginDownloads", fields: [pluginId], references: [id], onDelete: Cascade)
  user         User?             @relation("UserPluginDownloads", fields: [userId], references: [id])

  @@index([pluginId])
  @@index([userId])
  @@index([downloadedAt])
  @@map("plugin_downloads")
}

model PluginStat {
  pluginId         String            @id
  downloadsTotal   Int               @default(0)
  downloadsMonthly Int               @default(0)
  activeInstalls   Int               @default(0)
  ratingAverage    Decimal           @default(0) @db.Decimal(3, 2)
  ratingCount      Int               @default(0)
  revenue          Decimal           @default(0) @db.Decimal(12, 2)
  lastUpdated      DateTime          @default(now())
  plugin           MarketplacePlugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@map("plugin_stats")
}

model ReviewVote {
  id        String       @id @default(cuid())
  reviewId  String
  userId    String
  vote      String
  createdAt DateTime     @default(now())
  review    PluginReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User         @relation("UserReviewVotes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
  @@index([vote])
  @@map("review_votes")
}

model UserDashboardPreference {
  id           String          @id @default(cuid())
  userId       String          @unique
  layout       DashboardLayout @default(DEFAULT)
  theme        String          @default("default")
  widgets      Json
  layoutConfig Json
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         User            @relation("UserDashboardPreferences", fields: [userId], references: [id], onDelete: Cascade)
}

model DashboardWidget {
  id          String         @id @default(cuid())
  name        String         @unique
  title       String
  description String?
  type        WidgetType
  category    WidgetCategory
  icon        String?
  component   String
  config      Json?
  isActive    Boolean        @default(true)
  isDefault   Boolean        @default(false)
  sortOrder   Int            @default(0)
  permissions String[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userWidgets UserWidget[]
}

model UserWidget {
  id        String          @id @default(cuid())
  userId    String
  widgetId  String
  isEnabled Boolean         @default(true)
  position  Json
  config    Json?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation("UserWidgets", fields: [userId], references: [id], onDelete: Cascade)
  widget    DashboardWidget @relation(fields: [widgetId], references: [id], onDelete: Cascade)

  @@unique([userId, widgetId])
}

model DashboardActivity {
  id          String   @id @default(cuid())
  userId      String
  action      String
  entityType  String?
  entityId    String?
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  user        User     @relation("UserDashboardActivities", fields: [userId], references: [id], onDelete: Cascade)
}

model QuickAction {
  id          String   @id @default(cuid())
  title       String   @unique
  description String?
  icon        String?
  href        String?
  action      String?
  color       String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  permissions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ChartDataCache {
  id        String   @id @default(cuid())
  chartType String
  data      Json
  filters   Json?
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([chartType, expiresAt])
}

model DashboardSystemHealthMetric {
  id                String   @id @default(cuid())
  storageUsed       BigInt
  storageTotal      BigInt
  memoryUsage       Float
  cpuUsage          Float
  uptimeSeconds     BigInt
  activeConnections Int
  databaseSize      BigInt
  cacheHitRate      Float
  createdAt         DateTime @default(now())

  @@index([createdAt])
}

model DashboardSettings {
  id         String   @id @default(cuid())
  userId     String   @unique
  layoutMode String   @default("default")
  theme      String   @default("neutral")
  widgets    Json
  layout     Json
  appearance Json
  data       Json
  gridLayout Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation("UserDashboardSettings", fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  EDITOR
  ADMIN
  SUPER_ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum DashboardLayout {
  DEFAULT
  CUSTOM
}

enum WidgetType {
  STATS_CARD
  CHART
  LIST
  QUICK_ACTIONS
  NOTIFICATIONS
  ACTIVITY_FEED
  SYSTEM_HEALTH
  SECURITY_STATUS
  REAL_TIME_VISITORS
  TRAFFIC_SOURCES
  DEVICE_BREAKDOWN
  GEOGRAPHIC_DATA
  CONTENT_PERFORMANCE
  CUSTOM
}

enum WidgetCategory {
  OVERVIEW
  ANALYTICS
  CONTENT
  USERS
  SYSTEM
  SECURITY
  CUSTOM
}
